The symbolic summary of the old method 
(let ((a!1 (and (> 7 x)
                (<= 6 x)
                (<= 5 x)
                (<= 4 x)
                (<= 3 x)
                (<= 2 x)
                (<= 1 x)
                (< x 7)
                (>= x 5)
                (= Ret (+ (+ UF_c_1 5 5 5 5 5) 5)))))
  (or a!1
      (and (> 6 x)
           (<= 5 x)
           (<= 4 x)
           (<= 3 x)
           (<= 2 x)
           (<= 1 x)
           (< x 7)
           (>= x 5)
           (= Ret (+ UF_c_1 5 5 5 5 5)))
      (and (>= x 7) (>= x 5) (= Ret 0))
      (and (< x 5) (= Ret 0))))
The symbolic summary of the new method 
(or (and (< x 7) (>= x 5) (= Ret (+ x x x x x UF_c_1)))
    (and (>= x 7) (>= x 5) (= Ret 0))
    (and (< x 5) (= Ret 0)))Constraint solving : 
(declare-fun x () Int)
(declare-fun Ret () Int)
(declare-fun UF_c_1 () Int)
(let ((a!1 (and (> 7 x)
                (<= 6 x)
                (<= 5 x)
                (<= 4 x)
                (<= 3 x)
                (<= 2 x)
                (<= 1 x)
                (< x 7)
                (>= x 5)
                (= Ret (+ (+ UF_c_1 5 5 5 5 5) 5))))
      (a!2 (and (>= x 7) (>= x 5) (= Ret 0))))
(let ((a!3 (or a!1
               (and (> 6 x)
                    (<= 5 x)
                    (<= 4 x)
                    (<= 3 x)
                    (<= 2 x)
                    (<= 1 x)
                    (< x 7)
                    (>= x 5)
                    (= Ret (+ UF_c_1 5 5 5 5 5)))
               a!2
               (and (< x 5) (= Ret 0))))
      (a!4 (or (and (< x 7) (>= x 5) (= Ret (+ x x x x x UF_c_1)))
               a!2
               (and (< x 5) (= Ret 0)))))
  (not (= a!3 a!4))))
