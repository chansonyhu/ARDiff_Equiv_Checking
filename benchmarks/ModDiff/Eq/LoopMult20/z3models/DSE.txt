The symbolic summary of the old method 
(or (and (< x 22)
         (>= x 18)
         (= Ret (+ x x x x x x x x x x x x x x x x x x x x UF_c_1)))
    (and (>= x 22) (>= x 18) (= Ret 0))
    (and (< x 18) (= Ret 0)))
The symbolic summary of the new method 
(or (and (>= x 22) (>= x 18) (= Ret 0)) (and (< x 18) (= Ret 0)))Constraint solving : 
(declare-fun x () Int)
(declare-fun Ret () Int)
(declare-fun UF_c_1 () Int)(let ((a!1 (and (>= x 22) (>= x 18) (= Ret 0))))
(let ((a!2 (or (and (< x 22)
                    (>= x 18)
                    (= Ret (+ x x x x x x x x x x x x x x x x x x x x UF_c_1)))
               a!1
               (and (< x 18) (= Ret 0)))))
(let ((a!3 (= a!2 (or a!1 (and (< x 18) (= Ret 0))))))
  (not a!3))))


Model : 
(define-fun Ret () Int
  0)
(define-fun x () Int
  18)
(define-fun UF_c_1 () Int
  (- 360))