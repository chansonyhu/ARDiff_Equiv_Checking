The symbolic summary of the old method 
(and (= REAL_2 (to_real (+ b a))) (= Ret REAL_2))
The symbolic summary of the new method 
(and (= REAL_2 (to_real (+ b a 3))) (= Ret REAL_2))Constraint solving : 
(declare-fun REAL_2 () Real)
(declare-fun b () Int)
(declare-fun a () Int)
(declare-fun Ret () Real)
(let ((a!1 (and (= REAL_2 (to_real (+ b a))) (= Ret REAL_2)))
      (a!2 (= REAL_2 (to_real (+ (+ b a) 3)))))
  (not (= a!1 (and a!2 (= Ret REAL_2)))))


Model : 
(define-fun REAL_2 () Real
  0.0)
(define-fun b () Int
  0)
(define-fun a () Int
  0)
(define-fun Ret () Real
  0.0)