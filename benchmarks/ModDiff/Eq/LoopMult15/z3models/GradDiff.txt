The symbolic summary of the old method 
(or (and (< x 16) (>= x 13) (= Ret (+ x x x x x x x x x x x x x x x UF_c_1)))
    (and (>= x 16) (>= x 13) (= Ret 0))
    (and (< x 13) (= Ret 0)))
The symbolic summary of the new method 
(let ((a!1 (+ UF_c_1 15 15 15 15 15 15 15 15 15 15 15 15 15)))
(let ((a!2 (and (> 16 x)
                (<= 15 x)
                (<= 14 x)
                (<= 13 x)
                (<= 12 x)
                (<= 11 x)
                (<= 10 x)
                (<= 9 x)
                (<= 8 x)
                (<= 7 x)
                (<= 6 x)
                (<= 5 x)
                (<= 4 x)
                (<= 3 x)
                (<= 2 x)
                (<= 1 x)
                (< x 16)
                (>= x 13)
                (= Ret (+ (+ a!1 15) 15)))))
  (or a!2
      (and (> 15 x)
           (<= 14 x)
           (<= 13 x)
           (<= 12 x)
           (<= 11 x)
           (<= 10 x)
           (<= 9 x)
           (<= 8 x)
           (<= 7 x)
           (<= 6 x)
           (<= 5 x)
           (<= 4 x)
           (<= 3 x)
           (<= 2 x)
           (<= 1 x)
           (< x 16)
           (>= x 13)
           (= Ret (+ a!1 15)))
      (and (> 14 x)
           (<= 13 x)
           (<= 12 x)
           (<= 11 x)
           (<= 10 x)
           (<= 9 x)
           (<= 8 x)
           (<= 7 x)
           (<= 6 x)
           (<= 5 x)
           (<= 4 x)
           (<= 3 x)
           (<= 2 x)
           (<= 1 x)
           (< x 16)
           (>= x 13)
           (= Ret a!1))
      (and (>= x 16) (>= x 13) (= Ret 0))
      (and (< x 13) (= Ret 0)))))Constraint solving : 
(declare-fun x () Int)
(declare-fun Ret () Int)
(declare-fun UF_c_1 () Int)
(let ((a!1 (and (>= x 16) (>= x 13) (= Ret 0)))
      (a!3 (+ UF_c_1 15 15 15 15 15 15 15 15 15 15 15 15 15)))
(let ((a!2 (or (and (< x 16)
                    (>= x 13)
                    (= Ret (+ x x x x x x x x x x x x x x x UF_c_1)))
               a!1
               (and (< x 13) (= Ret 0))))
      (a!4 (and (> 16 x)
                (<= 15 x)
                (<= 14 x)
                (<= 13 x)
                (<= 12 x)
                (<= 11 x)
                (<= 10 x)
                (<= 9 x)
                (<= 8 x)
                (<= 7 x)
                (<= 6 x)
                (<= 5 x)
                (<= 4 x)
                (<= 3 x)
                (<= 2 x)
                (<= 1 x)
                (< x 16)
                (>= x 13)
                (= Ret (+ (+ a!3 15) 15)))))
(let ((a!5 (or a!4
               (and (> 15 x)
                    (<= 14 x)
                    (<= 13 x)
                    (<= 12 x)
                    (<= 11 x)
                    (<= 10 x)
                    (<= 9 x)
                    (<= 8 x)
                    (<= 7 x)
                    (<= 6 x)
                    (<= 5 x)
                    (<= 4 x)
                    (<= 3 x)
                    (<= 2 x)
                    (<= 1 x)
                    (< x 16)
                    (>= x 13)
                    (= Ret (+ a!3 15)))
               (and (> 14 x)
                    (<= 13 x)
                    (<= 12 x)
                    (<= 11 x)
                    (<= 10 x)
                    (<= 9 x)
                    (<= 8 x)
                    (<= 7 x)
                    (<= 6 x)
                    (<= 5 x)
                    (<= 4 x)
                    (<= 3 x)
                    (<= 2 x)
                    (<= 1 x)
                    (< x 16)
                    (>= x 13)
                    (= Ret a!3))
               a!1
               (and (< x 13) (= Ret 0)))))
  (not (= a!2 a!5)))))
