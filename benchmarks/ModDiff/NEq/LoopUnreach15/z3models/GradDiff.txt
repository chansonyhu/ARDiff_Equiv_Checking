The symbolic summary of the old method 
(or (and (>= x 0) (< x 16) (>= x 13) (= Ret 0))
    (and (>= x 16) (>= x 13) (= Ret 0))
    (and (< x 13) (= Ret 0)))
The symbolic summary of the new method 
(or (and (>= x 0) (< x 16) (>= x 13) (= Ret 1))
    (and (>= x 16) (>= x 13) (= Ret 0))
    (and (< x 13) (= Ret 0)))Constraint solving : 
(declare-fun x () Int)
(declare-fun Ret () Int)
(let ((a!1 (and (>= x 0) (< x 16) (>= x 13)))
      (a!2 (and (>= x 16) (>= x 13) (= Ret 0))))
(let ((a!3 (= (or (and a!1 (= Ret 0)) a!2 (and (< x 13) (= Ret 0)))
              (or (and a!1 (= Ret 1)) a!2 (and (< x 13) (= Ret 0))))))
  (not a!3)))


Model : 
(define-fun Ret () Int
  0)
(define-fun x () Int
  13)