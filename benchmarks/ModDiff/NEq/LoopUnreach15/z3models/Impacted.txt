The symbolic summary of the old method 
(and (>= x 0) (< x 16) (>= x 13) (= Ret 0))
The symbolic summary of the new method 
(and (>= x 0) (< x 16) (>= x 13) (= Ret 1))Constraint solving : 
(declare-fun x () Int)
(declare-fun Ret () Int)
(let ((a!1 (and (>= x 0) (< x 16) (>= x 13))))
  (not (= (and a!1 (= Ret 0)) (and a!1 (= Ret 1)))))


Model : 
(define-fun Ret () Int
  0)
(define-fun x () Int
  13)