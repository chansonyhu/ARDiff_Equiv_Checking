The symbolic summary of the old method 
(let ((a!1 (+ b (+ b (+ b (+ b b)))))
      (a!4 (+ (+ b (+ b (+ b b))) 1))
      (a!5 (= Ret (+ (+ b (+ b b)) 1)))
      (a!6 (and (>= 2 a) (< 1 a) (< 0 a) (= Ret (+ (+ b b) 1)))))
(let ((a!2 (and (>= 7 a)
                (< 6 a)
                (< 5 a)
                (< 4 a)
                (< 3 a)
                (< 2 a)
                (< 1 a)
                (< 0 a)
                (= Ret (+ b (+ b a!1) 1))))
      (a!3 (and (>= 6 a)
                (< 5 a)
                (< 4 a)
                (< 3 a)
                (< 2 a)
                (< 1 a)
                (< 0 a)
                (= Ret (+ (+ b a!1) 1)))))
  (or a!2
      a!3
      (and (>= 5 a) (< 4 a) (< 3 a) (< 2 a) (< 1 a) (< 0 a) (= Ret (+ a!1 1)))
      (and (>= 4 a) (< 3 a) (< 2 a) (< 1 a) (< 0 a) (= Ret a!4))
      (and (>= 3 a) (< 2 a) (< 1 a) (< 0 a) a!5)
      a!6
      (and (>= 1 a) (< 0 a) (= Ret (+ b 1)))
      (and (>= 0 a) (= Ret 1)))))
The symbolic summary of the new method 
(let ((a!1 (+ b (+ b (+ b (+ b 1)))))
      (a!4 (= Ret (+ b (+ b (+ b 1)))))
      (a!5 (and (>= 2 (+ a 1))
                (< 1 (+ a 1))
                (< 0 (+ a 1))
                (= Ret (+ b (+ b 1))))))
(let ((a!2 (= Ret (+ b (+ b (+ b a!1)))))
      (a!3 (and (>= 6 (+ a 1))
                (< 5 (+ a 1))
                (< 4 (+ a 1))
                (< 3 (+ a 1))
                (< 2 (+ a 1))
                (< 1 (+ a 1))
                (< 0 (+ a 1))
                (= Ret (+ b (+ b a!1))))))
  (or (and (>= 7 (+ a 1))
           (< 6 (+ a 1))
           (< 5 (+ a 1))
           (< 4 (+ a 1))
           (< 3 (+ a 1))
           (< 2 (+ a 1))
           (< 1 (+ a 1))
           (< 0 (+ a 1))
           a!2)
      a!3
      (and (>= 5 (+ a 1))
           (< 4 (+ a 1))
           (< 3 (+ a 1))
           (< 2 (+ a 1))
           (< 1 (+ a 1))
           (< 0 (+ a 1))
           (= Ret (+ b a!1)))
      (and (>= 4 (+ a 1))
           (< 3 (+ a 1))
           (< 2 (+ a 1))
           (< 1 (+ a 1))
           (< 0 (+ a 1))
           (= Ret a!1))
      (and (>= 3 (+ a 1)) (< 2 (+ a 1)) (< 1 (+ a 1)) (< 0 (+ a 1)) a!4)
      a!5
      (and (>= 1 (+ a 1)) (< 0 (+ a 1)) (= Ret (+ b 1)))
      (and (>= 0 (+ a 1)) (= Ret 1)))))Constraint solving : 
(declare-fun a () Int)
(declare-fun Ret () Int)
(declare-fun b () Int)
(let ((a!1 (+ b (+ b (+ b (+ b b)))))
      (a!4 (+ (+ b (+ b (+ b b))) 1))
      (a!5 (= Ret (+ (+ b (+ b b)) 1)))
      (a!6 (and (>= 2 a) (< 1 a) (< 0 a) (= Ret (+ (+ b b) 1))))
      (a!8 (+ b (+ b (+ b (+ b 1)))))
      (a!11 (= Ret (+ b (+ b (+ b 1)))))
      (a!12 (and (>= 2 (+ a 1))
                 (< 1 (+ a 1))
                 (< 0 (+ a 1))
                 (= Ret (+ b (+ b 1))))))
(let ((a!2 (and (>= 7 a)
                (< 6 a)
                (< 5 a)
                (< 4 a)
                (< 3 a)
                (< 2 a)
                (< 1 a)
                (< 0 a)
                (= Ret (+ b (+ b a!1) 1))))
      (a!3 (and (>= 6 a)
                (< 5 a)
                (< 4 a)
                (< 3 a)
                (< 2 a)
                (< 1 a)
                (< 0 a)
                (= Ret (+ (+ b a!1) 1))))
      (a!9 (= Ret (+ b (+ b (+ b a!8)))))
      (a!10 (and (>= 6 (+ a 1))
                 (< 5 (+ a 1))
                 (< 4 (+ a 1))
                 (< 3 (+ a 1))
                 (< 2 (+ a 1))
                 (< 1 (+ a 1))
                 (< 0 (+ a 1))
                 (= Ret (+ b (+ b a!8))))))
(let ((a!7 (or a!2
               a!3
               (and (>= 5 a)
                    (< 4 a)
                    (< 3 a)
                    (< 2 a)
                    (< 1 a)
                    (< 0 a)
                    (= Ret (+ a!1 1)))
               (and (>= 4 a) (< 3 a) (< 2 a) (< 1 a) (< 0 a) (= Ret a!4))
               (and (>= 3 a) (< 2 a) (< 1 a) (< 0 a) a!5)
               a!6
               (and (>= 1 a) (< 0 a) (= Ret (+ b 1)))
               (and (>= 0 a) (= Ret 1))))
      (a!13 (or (and (>= 7 (+ a 1))
                     (< 6 (+ a 1))
                     (< 5 (+ a 1))
                     (< 4 (+ a 1))
                     (< 3 (+ a 1))
                     (< 2 (+ a 1))
                     (< 1 (+ a 1))
                     (< 0 (+ a 1))
                     a!9)
                a!10
                (and (>= 5 (+ a 1))
                     (< 4 (+ a 1))
                     (< 3 (+ a 1))
                     (< 2 (+ a 1))
                     (< 1 (+ a 1))
                     (< 0 (+ a 1))
                     (= Ret (+ b a!8)))
                (and (>= 4 (+ a 1))
                     (< 3 (+ a 1))
                     (< 2 (+ a 1))
                     (< 1 (+ a 1))
                     (< 0 (+ a 1))
                     (= Ret a!8))
                (and (>= 3 (+ a 1))
                     (< 2 (+ a 1))
                     (< 1 (+ a 1))
                     (< 0 (+ a 1))
                     a!11)
                a!12
                (and (>= 1 (+ a 1)) (< 0 (+ a 1)) (= Ret (+ b 1)))
                (and (>= 0 (+ a 1)) (= Ret 1)))))
  (not (= a!7 a!13)))))


Model : 
(define-fun b () Int
  1)
(define-fun a () Int
  7)
(define-fun Ret () Int
  8)